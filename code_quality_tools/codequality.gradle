subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)
                || 'com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    plugins.apply('pmd')

    pmd {
        toolVersion = '5.4.0'
    }

    task pmd(type: Pmd) {
        ignoreFailures = false
        ruleSetFiles = project.files(rootProject.file("code_quality_tools/pmd.xml"))
        ruleSets = []

        source = fileTree('src/main/java')
    }

    plugins.apply('findbugs')

    task findbugs(type: FindBugs) {
        ignoreFailures = true
        effort = 'max'
        reportLevel = 'high'

        classes = files("${project.projectDir}/build/intermediates/classes")
        source = fileTree('src/main/java')

        classpath = files()

        reports {
            xml.enabled = false
            xml.withMessages = true
            html.enabled = !xml.isEnabled()
            xml.destination "$project.buildDir/outputs/findbugs/findbugs-output.xml"
            html.destination "$project.buildDir/outputs/findbugs/findbugs-output.html"
        }


        excludeFilter = rootProject.file('code_quality_tools/findbugs.xml')
    }

    plugins.apply('checkstyle')

    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('code_quality_tools/checkstyle.xml')

        ignoreFailures false
        showViolations true

        source 'src/main/java'
        include '**/*.java'

        classpath = files()
    }

    afterEvaluate {
        tasks.findByName('pmd').dependsOn('assemble')
        tasks.findByName('findbugs').dependsOn('assemble')

        def checkTask = tasks.findByName('check')

        checkTask.dependsOn('pmd')
        checkTask.dependsOn('findbugs')
        checkTask.dependsOn('checkstyle')

        rootProject.ext.testTask
    }
}